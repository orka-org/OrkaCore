// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.3
// - protoc             v5.28.3
// source: organization/v1/organization.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationOrgServiceAddOrgRole = "/organization.v1.OrgService/AddOrgRole"
const OperationOrgServiceCreateOrg = "/organization.v1.OrgService/CreateOrg"
const OperationOrgServiceDeleteOrg = "/organization.v1.OrgService/DeleteOrg"
const OperationOrgServiceGetMembers = "/organization.v1.OrgService/GetMembers"
const OperationOrgServiceGetOrg = "/organization.v1.OrgService/GetOrg"
const OperationOrgServiceInviteMember = "/organization.v1.OrgService/InviteMember"
const OperationOrgServiceRemoveMember = "/organization.v1.OrgService/RemoveMember"
const OperationOrgServiceRemoveOrgRole = "/organization.v1.OrgService/RemoveOrgRole"
const OperationOrgServiceUpdateMemberRole = "/organization.v1.OrgService/UpdateMemberRole"
const OperationOrgServiceUpdateOrg = "/organization.v1.OrgService/UpdateOrg"
const OperationOrgServiceUpdateOrgRolePermission = "/organization.v1.OrgService/UpdateOrgRolePermission"
const OperationOrgServiceUpdateOrgSettings = "/organization.v1.OrgService/UpdateOrgSettings"

type OrgServiceHTTPServer interface {
	AddOrgRole(context.Context, *AddOrgRoleRequest) (*AddOrgRoleResponse, error)
	CreateOrg(context.Context, *CreateOrgRequest) (*CreateOrgResponse, error)
	DeleteOrg(context.Context, *DeleteOrgRequest) (*DeleteOrgResponse, error)
	GetMembers(context.Context, *GetMembersRequest) (*GetMembersResponse, error)
	GetOrg(context.Context, *GetOrgRequest) (*GetOrgResponse, error)
	InviteMember(context.Context, *InviteMemberRequest) (*InviteMemberResponse, error)
	RemoveMember(context.Context, *RemoveMemberRequest) (*RemoveMemberResponse, error)
	RemoveOrgRole(context.Context, *RemoveOrgRoleRequest) (*RemoveOrgRoleResponse, error)
	UpdateMemberRole(context.Context, *UpdateMemberRoleRequest) (*UpdateMemberRoleResponse, error)
	UpdateOrg(context.Context, *UpdateOrgRequest) (*UpdateOrgResponse, error)
	UpdateOrgRolePermission(context.Context, *UpdateOrgRolePermissionRequest) (*UpdateOrgRolePermissionResponse, error)
	UpdateOrgSettings(context.Context, *UpdateOrgSettingsRequest) (*UpdateOrgSettingsResponse, error)
}

func RegisterOrgServiceHTTPServer(s *http.Server, srv OrgServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/organizations/create", _OrgService_CreateOrg0_HTTP_Handler(srv))
	r.POST("organizations/{org_id}", _OrgService_GetOrg0_HTTP_Handler(srv))
	r.PATCH("organizations/{org_id}", _OrgService_UpdateOrg0_HTTP_Handler(srv))
	r.DELETE("organizations/{org_id}", _OrgService_DeleteOrg0_HTTP_Handler(srv))
	r.PATCH("organizations/{org_id}/settings", _OrgService_UpdateOrgSettings0_HTTP_Handler(srv))
	r.GET("organizations/{org_id}/members", _OrgService_GetMembers0_HTTP_Handler(srv))
	r.POST("organizations/{org_id}/members", _OrgService_InviteMember0_HTTP_Handler(srv))
	r.DELETE("organizations/{org_id}/members/{user_id}", _OrgService_RemoveMember0_HTTP_Handler(srv))
	r.PATCH("organizations/{org_id}/members/{user_id}", _OrgService_UpdateMemberRole0_HTTP_Handler(srv))
	r.POST("organizations/{org_id}/roles", _OrgService_AddOrgRole0_HTTP_Handler(srv))
	r.DELETE("organizations/{org_id}/roles/{role_id}", _OrgService_RemoveOrgRole0_HTTP_Handler(srv))
	r.POST("organizations/{org_id}/roles/{role_id}/permissions", _OrgService_UpdateOrgRolePermission0_HTTP_Handler(srv))
}

func _OrgService_CreateOrg0_HTTP_Handler(srv OrgServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateOrgRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrgServiceCreateOrg)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateOrg(ctx, req.(*CreateOrgRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateOrgResponse)
		return ctx.Result(200, reply)
	}
}

func _OrgService_GetOrg0_HTTP_Handler(srv OrgServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetOrgRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrgServiceGetOrg)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetOrg(ctx, req.(*GetOrgRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetOrgResponse)
		return ctx.Result(200, reply)
	}
}

func _OrgService_UpdateOrg0_HTTP_Handler(srv OrgServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOrgRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrgServiceUpdateOrg)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOrg(ctx, req.(*UpdateOrgRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateOrgResponse)
		return ctx.Result(200, reply)
	}
}

func _OrgService_DeleteOrg0_HTTP_Handler(srv OrgServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteOrgRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrgServiceDeleteOrg)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteOrg(ctx, req.(*DeleteOrgRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteOrgResponse)
		return ctx.Result(200, reply)
	}
}

func _OrgService_UpdateOrgSettings0_HTTP_Handler(srv OrgServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOrgSettingsRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrgServiceUpdateOrgSettings)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOrgSettings(ctx, req.(*UpdateOrgSettingsRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateOrgSettingsResponse)
		return ctx.Result(200, reply)
	}
}

func _OrgService_GetMembers0_HTTP_Handler(srv OrgServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMembersRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrgServiceGetMembers)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMembers(ctx, req.(*GetMembersRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMembersResponse)
		return ctx.Result(200, reply)
	}
}

func _OrgService_InviteMember0_HTTP_Handler(srv OrgServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InviteMemberRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrgServiceInviteMember)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InviteMember(ctx, req.(*InviteMemberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InviteMemberResponse)
		return ctx.Result(200, reply)
	}
}

func _OrgService_RemoveMember0_HTTP_Handler(srv OrgServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveMemberRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrgServiceRemoveMember)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveMember(ctx, req.(*RemoveMemberRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemoveMemberResponse)
		return ctx.Result(200, reply)
	}
}

func _OrgService_UpdateMemberRole0_HTTP_Handler(srv OrgServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateMemberRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrgServiceUpdateMemberRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateMemberRole(ctx, req.(*UpdateMemberRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateMemberRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _OrgService_AddOrgRole0_HTTP_Handler(srv OrgServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AddOrgRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrgServiceAddOrgRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AddOrgRole(ctx, req.(*AddOrgRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AddOrgRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _OrgService_RemoveOrgRole0_HTTP_Handler(srv OrgServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RemoveOrgRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrgServiceRemoveOrgRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RemoveOrgRole(ctx, req.(*RemoveOrgRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RemoveOrgRoleResponse)
		return ctx.Result(200, reply)
	}
}

func _OrgService_UpdateOrgRolePermission0_HTTP_Handler(srv OrgServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateOrgRolePermissionRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationOrgServiceUpdateOrgRolePermission)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateOrgRolePermission(ctx, req.(*UpdateOrgRolePermissionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateOrgRolePermissionResponse)
		return ctx.Result(200, reply)
	}
}

type OrgServiceHTTPClient interface {
	AddOrgRole(ctx context.Context, req *AddOrgRoleRequest, opts ...http.CallOption) (rsp *AddOrgRoleResponse, err error)
	CreateOrg(ctx context.Context, req *CreateOrgRequest, opts ...http.CallOption) (rsp *CreateOrgResponse, err error)
	DeleteOrg(ctx context.Context, req *DeleteOrgRequest, opts ...http.CallOption) (rsp *DeleteOrgResponse, err error)
	GetMembers(ctx context.Context, req *GetMembersRequest, opts ...http.CallOption) (rsp *GetMembersResponse, err error)
	GetOrg(ctx context.Context, req *GetOrgRequest, opts ...http.CallOption) (rsp *GetOrgResponse, err error)
	InviteMember(ctx context.Context, req *InviteMemberRequest, opts ...http.CallOption) (rsp *InviteMemberResponse, err error)
	RemoveMember(ctx context.Context, req *RemoveMemberRequest, opts ...http.CallOption) (rsp *RemoveMemberResponse, err error)
	RemoveOrgRole(ctx context.Context, req *RemoveOrgRoleRequest, opts ...http.CallOption) (rsp *RemoveOrgRoleResponse, err error)
	UpdateMemberRole(ctx context.Context, req *UpdateMemberRoleRequest, opts ...http.CallOption) (rsp *UpdateMemberRoleResponse, err error)
	UpdateOrg(ctx context.Context, req *UpdateOrgRequest, opts ...http.CallOption) (rsp *UpdateOrgResponse, err error)
	UpdateOrgRolePermission(ctx context.Context, req *UpdateOrgRolePermissionRequest, opts ...http.CallOption) (rsp *UpdateOrgRolePermissionResponse, err error)
	UpdateOrgSettings(ctx context.Context, req *UpdateOrgSettingsRequest, opts ...http.CallOption) (rsp *UpdateOrgSettingsResponse, err error)
}

type OrgServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewOrgServiceHTTPClient(client *http.Client) OrgServiceHTTPClient {
	return &OrgServiceHTTPClientImpl{client}
}

func (c *OrgServiceHTTPClientImpl) AddOrgRole(ctx context.Context, in *AddOrgRoleRequest, opts ...http.CallOption) (*AddOrgRoleResponse, error) {
	var out AddOrgRoleResponse
	pattern := "organizations/{org_id}/roles"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrgServiceAddOrgRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrgServiceHTTPClientImpl) CreateOrg(ctx context.Context, in *CreateOrgRequest, opts ...http.CallOption) (*CreateOrgResponse, error) {
	var out CreateOrgResponse
	pattern := "/organizations/create"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrgServiceCreateOrg))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrgServiceHTTPClientImpl) DeleteOrg(ctx context.Context, in *DeleteOrgRequest, opts ...http.CallOption) (*DeleteOrgResponse, error) {
	var out DeleteOrgResponse
	pattern := "organizations/{org_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrgServiceDeleteOrg))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrgServiceHTTPClientImpl) GetMembers(ctx context.Context, in *GetMembersRequest, opts ...http.CallOption) (*GetMembersResponse, error) {
	var out GetMembersResponse
	pattern := "organizations/{org_id}/members"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrgServiceGetMembers))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrgServiceHTTPClientImpl) GetOrg(ctx context.Context, in *GetOrgRequest, opts ...http.CallOption) (*GetOrgResponse, error) {
	var out GetOrgResponse
	pattern := "organizations/{org_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrgServiceGetOrg))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrgServiceHTTPClientImpl) InviteMember(ctx context.Context, in *InviteMemberRequest, opts ...http.CallOption) (*InviteMemberResponse, error) {
	var out InviteMemberResponse
	pattern := "organizations/{org_id}/members"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrgServiceInviteMember))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrgServiceHTTPClientImpl) RemoveMember(ctx context.Context, in *RemoveMemberRequest, opts ...http.CallOption) (*RemoveMemberResponse, error) {
	var out RemoveMemberResponse
	pattern := "organizations/{org_id}/members/{user_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrgServiceRemoveMember))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrgServiceHTTPClientImpl) RemoveOrgRole(ctx context.Context, in *RemoveOrgRoleRequest, opts ...http.CallOption) (*RemoveOrgRoleResponse, error) {
	var out RemoveOrgRoleResponse
	pattern := "organizations/{org_id}/roles/{role_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrgServiceRemoveOrgRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrgServiceHTTPClientImpl) UpdateMemberRole(ctx context.Context, in *UpdateMemberRoleRequest, opts ...http.CallOption) (*UpdateMemberRoleResponse, error) {
	var out UpdateMemberRoleResponse
	pattern := "organizations/{org_id}/members/{user_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrgServiceUpdateMemberRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrgServiceHTTPClientImpl) UpdateOrg(ctx context.Context, in *UpdateOrgRequest, opts ...http.CallOption) (*UpdateOrgResponse, error) {
	var out UpdateOrgResponse
	pattern := "organizations/{org_id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrgServiceUpdateOrg))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrgServiceHTTPClientImpl) UpdateOrgRolePermission(ctx context.Context, in *UpdateOrgRolePermissionRequest, opts ...http.CallOption) (*UpdateOrgRolePermissionResponse, error) {
	var out UpdateOrgRolePermissionResponse
	pattern := "organizations/{org_id}/roles/{role_id}/permissions"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrgServiceUpdateOrgRolePermission))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *OrgServiceHTTPClientImpl) UpdateOrgSettings(ctx context.Context, in *UpdateOrgSettingsRequest, opts ...http.CallOption) (*UpdateOrgSettingsResponse, error) {
	var out UpdateOrgSettingsResponse
	pattern := "organizations/{org_id}/settings"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationOrgServiceUpdateOrgSettings))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PATCH", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
