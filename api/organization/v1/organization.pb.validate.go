// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: organization/v1/organization.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Organization with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Organization) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Organization with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrganizationMultiError, or
// nil if none found.
func (m *Organization) ValidateAll() error {
	return m.validate(true)
}

func (m *Organization) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for OwnerId

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return OrganizationMultiError(errors)
	}

	return nil
}

// OrganizationMultiError is an error wrapping multiple validation errors
// returned by Organization.ValidateAll() if the designated constraints aren't met.
type OrganizationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationMultiError) AllErrors() []error { return m }

// OrganizationValidationError is the validation error returned by
// Organization.Validate if the designated constraints aren't met.
type OrganizationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationValidationError) ErrorName() string { return "OrganizationValidationError" }

// Error satisfies the builtin error interface
func (e OrganizationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationValidationError{}

// Validate checks the field values on OrgSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OrgSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrgSettings with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrgSettingsMultiError, or
// nil if none found.
func (m *OrgSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *OrgSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AllowMembersToInvite

	// no validation rules for AdminRoleConfirmation

	// no validation rules for InviteConfirmation

	// no validation rules for InviteConfirmationRole

	// no validation rules for DefaultInviteRole

	if len(errors) > 0 {
		return OrgSettingsMultiError(errors)
	}

	return nil
}

// OrgSettingsMultiError is an error wrapping multiple validation errors
// returned by OrgSettings.ValidateAll() if the designated constraints aren't met.
type OrgSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrgSettingsMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrgSettingsMultiError) AllErrors() []error { return m }

// OrgSettingsValidationError is the validation error returned by
// OrgSettings.Validate if the designated constraints aren't met.
type OrgSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrgSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrgSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrgSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrgSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrgSettingsValidationError) ErrorName() string { return "OrgSettingsValidationError" }

// Error satisfies the builtin error interface
func (e OrgSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrgSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrgSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrgSettingsValidationError{}

// Validate checks the field values on Role with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Role) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Role with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in RoleMultiError, or nil if none found.
func (m *Role) ValidateAll() error {
	return m.validate(true)
}

func (m *Role) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	// no validation rules for Name

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RoleValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RoleValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return RoleMultiError(errors)
	}

	return nil
}

// RoleMultiError is an error wrapping multiple validation errors returned by
// Role.ValidateAll() if the designated constraints aren't met.
type RoleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RoleMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RoleMultiError) AllErrors() []error { return m }

// RoleValidationError is the validation error returned by Role.Validate if the
// designated constraints aren't met.
type RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RoleValidationError) ErrorName() string { return "RoleValidationError" }

// Error satisfies the builtin error interface
func (e RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRole.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RoleValidationError{}

// Validate checks the field values on Permission with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Permission) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Permission with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PermissionMultiError, or
// nil if none found.
func (m *Permission) ValidateAll() error {
	return m.validate(true)
}

func (m *Permission) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Object

	// no validation rules for Action

	if len(errors) > 0 {
		return PermissionMultiError(errors)
	}

	return nil
}

// PermissionMultiError is an error wrapping multiple validation errors
// returned by Permission.ValidateAll() if the designated constraints aren't met.
type PermissionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PermissionMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PermissionMultiError) AllErrors() []error { return m }

// PermissionValidationError is the validation error returned by
// Permission.Validate if the designated constraints aren't met.
type PermissionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PermissionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PermissionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PermissionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PermissionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PermissionValidationError) ErrorName() string { return "PermissionValidationError" }

// Error satisfies the builtin error interface
func (e PermissionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPermission.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PermissionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PermissionValidationError{}

// Validate checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemberMultiError, or nil if none found.
func (m *Member) ValidateAll() error {
	return m.validate(true)
}

func (m *Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for OrgId

	// no validation rules for UserId

	// no validation rules for RoleId

	// no validation rules for InvitedById

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for DeletedAt

	if len(errors) > 0 {
		return MemberMultiError(errors)
	}

	return nil
}

// MemberMultiError is an error wrapping multiple validation errors returned by
// Member.ValidateAll() if the designated constraints aren't met.
type MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberMultiError) AllErrors() []error { return m }

// MemberValidationError is the validation error returned by Member.Validate if
// the designated constraints aren't met.
type MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberValidationError) ErrorName() string { return "MemberValidationError" }

// Error satisfies the builtin error interface
func (e MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberValidationError{}

// Validate checks the field values on CreateOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgRequestMultiError, or nil if none found.
func (m *CreateOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorization

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrgRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrgRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrgRequestValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrgRequestMultiError(errors)
	}

	return nil
}

// CreateOrgRequestMultiError is an error wrapping multiple validation errors
// returned by CreateOrgRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgRequestMultiError) AllErrors() []error { return m }

// CreateOrgRequestValidationError is the validation error returned by
// CreateOrgRequest.Validate if the designated constraints aren't met.
type CreateOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgRequestValidationError) ErrorName() string { return "CreateOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgRequestValidationError{}

// Validate checks the field values on CreateOrgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateOrgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrgResponseMultiError, or nil if none found.
func (m *CreateOrgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrgResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrgResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrgResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrgResponseMultiError(errors)
	}

	return nil
}

// CreateOrgResponseMultiError is an error wrapping multiple validation errors
// returned by CreateOrgResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateOrgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrgResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrgResponseMultiError) AllErrors() []error { return m }

// CreateOrgResponseValidationError is the validation error returned by
// CreateOrgResponse.Validate if the designated constraints aren't met.
type CreateOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrgResponseValidationError) ErrorName() string {
	return "CreateOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrgResponseValidationError{}

// Validate checks the field values on GetOrgRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrgRequestMultiError, or
// nil if none found.
func (m *GetOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorization

	// no validation rules for OrgId

	if len(errors) > 0 {
		return GetOrgRequestMultiError(errors)
	}

	return nil
}

// GetOrgRequestMultiError is an error wrapping multiple validation errors
// returned by GetOrgRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgRequestMultiError) AllErrors() []error { return m }

// GetOrgRequestValidationError is the validation error returned by
// GetOrgRequest.Validate if the designated constraints aren't met.
type GetOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgRequestValidationError) ErrorName() string { return "GetOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgRequestValidationError{}

// Validate checks the field values on GetOrgResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetOrgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetOrgResponseMultiError,
// or nil if none found.
func (m *GetOrgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrgResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrgResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrgResponseMultiError(errors)
	}

	return nil
}

// GetOrgResponseMultiError is an error wrapping multiple validation errors
// returned by GetOrgResponse.ValidateAll() if the designated constraints
// aren't met.
type GetOrgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrgResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrgResponseMultiError) AllErrors() []error { return m }

// GetOrgResponseValidationError is the validation error returned by
// GetOrgResponse.Validate if the designated constraints aren't met.
type GetOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgResponseValidationError) ErrorName() string { return "GetOrgResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgResponseValidationError{}

// Validate checks the field values on UpdateOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrgRequestMultiError, or nil if none found.
func (m *UpdateOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorization

	// no validation rules for OrgId

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrgRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrgRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgRequestValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrgRequestMultiError(errors)
	}

	return nil
}

// UpdateOrgRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateOrgRequest.ValidateAll() if the designated constraints
// aren't met.
type UpdateOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgRequestMultiError) AllErrors() []error { return m }

// UpdateOrgRequestValidationError is the validation error returned by
// UpdateOrgRequest.Validate if the designated constraints aren't met.
type UpdateOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgRequestValidationError) ErrorName() string { return "UpdateOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgRequestValidationError{}

// Validate checks the field values on UpdateOrgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrgResponseMultiError, or nil if none found.
func (m *UpdateOrgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrgResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrgResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrgResponseMultiError(errors)
	}

	return nil
}

// UpdateOrgResponseMultiError is an error wrapping multiple validation errors
// returned by UpdateOrgResponse.ValidateAll() if the designated constraints
// aren't met.
type UpdateOrgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgResponseMultiError) AllErrors() []error { return m }

// UpdateOrgResponseValidationError is the validation error returned by
// UpdateOrgResponse.Validate if the designated constraints aren't met.
type UpdateOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgResponseValidationError) ErrorName() string {
	return "UpdateOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgResponseValidationError{}

// Validate checks the field values on DeleteOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrgRequestMultiError, or nil if none found.
func (m *DeleteOrgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorization

	// no validation rules for OrgId

	if len(errors) > 0 {
		return DeleteOrgRequestMultiError(errors)
	}

	return nil
}

// DeleteOrgRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteOrgRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteOrgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrgRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrgRequestMultiError) AllErrors() []error { return m }

// DeleteOrgRequestValidationError is the validation error returned by
// DeleteOrgRequest.Validate if the designated constraints aren't met.
type DeleteOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrgRequestValidationError) ErrorName() string { return "DeleteOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e DeleteOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrgRequestValidationError{}

// Validate checks the field values on DeleteOrgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrgResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrgResponseMultiError, or nil if none found.
func (m *DeleteOrgResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrgResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteOrgResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteOrgResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteOrgResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteOrgResponseMultiError(errors)
	}

	return nil
}

// DeleteOrgResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteOrgResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteOrgResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrgResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrgResponseMultiError) AllErrors() []error { return m }

// DeleteOrgResponseValidationError is the validation error returned by
// DeleteOrgResponse.Validate if the designated constraints aren't met.
type DeleteOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrgResponseValidationError) ErrorName() string {
	return "DeleteOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrgResponseValidationError{}

// Validate checks the field values on UpdateOrgSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgSettingsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgSettingsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrgSettingsRequestMultiError, or nil if none found.
func (m *UpdateOrgSettingsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgSettingsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorization

	// no validation rules for OrgId

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrgSettingsRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrgSettingsRequestValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgSettingsRequestValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrgSettingsRequestMultiError(errors)
	}

	return nil
}

// UpdateOrgSettingsRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrgSettingsRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrgSettingsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgSettingsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgSettingsRequestMultiError) AllErrors() []error { return m }

// UpdateOrgSettingsRequestValidationError is the validation error returned by
// UpdateOrgSettingsRequest.Validate if the designated constraints aren't met.
type UpdateOrgSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgSettingsRequestValidationError) ErrorName() string {
	return "UpdateOrgSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgSettingsRequestValidationError{}

// Validate checks the field values on UpdateOrgSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgSettingsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrgSettingsResponseMultiError, or nil if none found.
func (m *UpdateOrgSettingsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgSettingsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrgSettingsResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrgSettingsResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgSettingsResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrgSettingsResponseMultiError(errors)
	}

	return nil
}

// UpdateOrgSettingsResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOrgSettingsResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrgSettingsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgSettingsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgSettingsResponseMultiError) AllErrors() []error { return m }

// UpdateOrgSettingsResponseValidationError is the validation error returned by
// UpdateOrgSettingsResponse.Validate if the designated constraints aren't met.
type UpdateOrgSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgSettingsResponseValidationError) ErrorName() string {
	return "UpdateOrgSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgSettingsResponseValidationError{}

// Validate checks the field values on GetMembersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMembersRequestMultiError, or nil if none found.
func (m *GetMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorization

	// no validation rules for OrgId

	if len(errors) > 0 {
		return GetMembersRequestMultiError(errors)
	}

	return nil
}

// GetMembersRequestMultiError is an error wrapping multiple validation errors
// returned by GetMembersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMembersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMembersRequestMultiError) AllErrors() []error { return m }

// GetMembersRequestValidationError is the validation error returned by
// GetMembersRequest.Validate if the designated constraints aren't met.
type GetMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMembersRequestValidationError) ErrorName() string {
	return "GetMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMembersRequestValidationError{}

// Validate checks the field values on GetMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMembersResponseMultiError, or nil if none found.
func (m *GetMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMembersResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMembersResponseMultiError(errors)
	}

	return nil
}

// GetMembersResponseMultiError is an error wrapping multiple validation errors
// returned by GetMembersResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMembersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMembersResponseMultiError) AllErrors() []error { return m }

// GetMembersResponseValidationError is the validation error returned by
// GetMembersResponse.Validate if the designated constraints aren't met.
type GetMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMembersResponseValidationError) ErrorName() string {
	return "GetMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMembersResponseValidationError{}

// Validate checks the field values on InviteMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteMemberRequestMultiError, or nil if none found.
func (m *InviteMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorization

	// no validation rules for OrgId

	// no validation rules for UserId

	if m.RoleId != nil {
		// no validation rules for RoleId
	}

	if len(errors) > 0 {
		return InviteMemberRequestMultiError(errors)
	}

	return nil
}

// InviteMemberRequestMultiError is an error wrapping multiple validation
// errors returned by InviteMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type InviteMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteMemberRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteMemberRequestMultiError) AllErrors() []error { return m }

// InviteMemberRequestValidationError is the validation error returned by
// InviteMemberRequest.Validate if the designated constraints aren't met.
type InviteMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteMemberRequestValidationError) ErrorName() string {
	return "InviteMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e InviteMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteMemberRequestValidationError{}

// Validate checks the field values on InviteMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *InviteMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InviteMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// InviteMemberResponseMultiError, or nil if none found.
func (m *InviteMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *InviteMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, InviteMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, InviteMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return InviteMemberResponseValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return InviteMemberResponseMultiError(errors)
	}

	return nil
}

// InviteMemberResponseMultiError is an error wrapping multiple validation
// errors returned by InviteMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type InviteMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InviteMemberResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InviteMemberResponseMultiError) AllErrors() []error { return m }

// InviteMemberResponseValidationError is the validation error returned by
// InviteMemberResponse.Validate if the designated constraints aren't met.
type InviteMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InviteMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InviteMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InviteMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InviteMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InviteMemberResponseValidationError) ErrorName() string {
	return "InviteMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e InviteMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInviteMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InviteMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InviteMemberResponseValidationError{}

// Validate checks the field values on RemoveMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveMemberRequestMultiError, or nil if none found.
func (m *RemoveMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorization

	// no validation rules for OrgId

	// no validation rules for UserId

	if len(errors) > 0 {
		return RemoveMemberRequestMultiError(errors)
	}

	return nil
}

// RemoveMemberRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveMemberRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveMemberRequestMultiError) AllErrors() []error { return m }

// RemoveMemberRequestValidationError is the validation error returned by
// RemoveMemberRequest.Validate if the designated constraints aren't met.
type RemoveMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMemberRequestValidationError) ErrorName() string {
	return "RemoveMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMemberRequestValidationError{}

// Validate checks the field values on RemoveMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveMemberResponseMultiError, or nil if none found.
func (m *RemoveMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveMemberResponseValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveMemberResponseMultiError(errors)
	}

	return nil
}

// RemoveMemberResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveMemberResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveMemberResponseMultiError) AllErrors() []error { return m }

// RemoveMemberResponseValidationError is the validation error returned by
// RemoveMemberResponse.Validate if the designated constraints aren't met.
type RemoveMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMemberResponseValidationError) ErrorName() string {
	return "RemoveMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMemberResponseValidationError{}

// Validate checks the field values on UpdateMemberRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMemberRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMemberRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMemberRoleRequestMultiError, or nil if none found.
func (m *UpdateMemberRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMemberRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorization

	// no validation rules for OrgId

	// no validation rules for UserId

	// no validation rules for RoleId

	if len(errors) > 0 {
		return UpdateMemberRoleRequestMultiError(errors)
	}

	return nil
}

// UpdateMemberRoleRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMemberRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMemberRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMemberRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMemberRoleRequestMultiError) AllErrors() []error { return m }

// UpdateMemberRoleRequestValidationError is the validation error returned by
// UpdateMemberRoleRequest.Validate if the designated constraints aren't met.
type UpdateMemberRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMemberRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMemberRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMemberRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMemberRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMemberRoleRequestValidationError) ErrorName() string {
	return "UpdateMemberRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMemberRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMemberRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMemberRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMemberRoleRequestValidationError{}

// Validate checks the field values on UpdateMemberRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMemberRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMemberRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMemberRoleResponseMultiError, or nil if none found.
func (m *UpdateMemberRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMemberRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMemberRoleResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMemberRoleResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMemberRoleResponseValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMemberRoleResponseMultiError(errors)
	}

	return nil
}

// UpdateMemberRoleResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMemberRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateMemberRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMemberRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMemberRoleResponseMultiError) AllErrors() []error { return m }

// UpdateMemberRoleResponseValidationError is the validation error returned by
// UpdateMemberRoleResponse.Validate if the designated constraints aren't met.
type UpdateMemberRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMemberRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMemberRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMemberRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMemberRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMemberRoleResponseValidationError) ErrorName() string {
	return "UpdateMemberRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMemberRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMemberRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMemberRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMemberRoleResponseValidationError{}

// Validate checks the field values on AddOrgRoleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *AddOrgRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrgRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrgRoleRequestMultiError, or nil if none found.
func (m *AddOrgRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrgRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorization

	// no validation rules for OrgId

	// no validation rules for RoleName

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AddOrgRoleRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AddOrgRoleRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddOrgRoleRequestValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AddOrgRoleRequestMultiError(errors)
	}

	return nil
}

// AddOrgRoleRequestMultiError is an error wrapping multiple validation errors
// returned by AddOrgRoleRequest.ValidateAll() if the designated constraints
// aren't met.
type AddOrgRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrgRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrgRoleRequestMultiError) AllErrors() []error { return m }

// AddOrgRoleRequestValidationError is the validation error returned by
// AddOrgRoleRequest.Validate if the designated constraints aren't met.
type AddOrgRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgRoleRequestValidationError) ErrorName() string {
	return "AddOrgRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgRoleRequestValidationError{}

// Validate checks the field values on AddOrgRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrgRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrgRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrgRoleResponseMultiError, or nil if none found.
func (m *AddOrgRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrgRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddOrgRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddOrgRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOrgRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddOrgRoleResponseMultiError(errors)
	}

	return nil
}

// AddOrgRoleResponseMultiError is an error wrapping multiple validation errors
// returned by AddOrgRoleResponse.ValidateAll() if the designated constraints
// aren't met.
type AddOrgRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrgRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrgRoleResponseMultiError) AllErrors() []error { return m }

// AddOrgRoleResponseValidationError is the validation error returned by
// AddOrgRoleResponse.Validate if the designated constraints aren't met.
type AddOrgRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgRoleResponseValidationError) ErrorName() string {
	return "AddOrgRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgRoleResponseValidationError{}

// Validate checks the field values on RemoveOrgRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveOrgRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOrgRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveOrgRoleRequestMultiError, or nil if none found.
func (m *RemoveOrgRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrgRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorization

	// no validation rules for OrgId

	// no validation rules for RoleId

	if len(errors) > 0 {
		return RemoveOrgRoleRequestMultiError(errors)
	}

	return nil
}

// RemoveOrgRoleRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveOrgRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveOrgRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrgRoleRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrgRoleRequestMultiError) AllErrors() []error { return m }

// RemoveOrgRoleRequestValidationError is the validation error returned by
// RemoveOrgRoleRequest.Validate if the designated constraints aren't met.
type RemoveOrgRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgRoleRequestValidationError) ErrorName() string {
	return "RemoveOrgRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrgRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgRoleRequestValidationError{}

// Validate checks the field values on RemoveOrgRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveOrgRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOrgRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveOrgRoleResponseMultiError, or nil if none found.
func (m *RemoveOrgRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrgRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RemoveOrgRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RemoveOrgRoleResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveOrgRoleResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RemoveOrgRoleResponseMultiError(errors)
	}

	return nil
}

// RemoveOrgRoleResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveOrgRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveOrgRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrgRoleResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrgRoleResponseMultiError) AllErrors() []error { return m }

// RemoveOrgRoleResponseValidationError is the validation error returned by
// RemoveOrgRoleResponse.Validate if the designated constraints aren't met.
type RemoveOrgRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgRoleResponseValidationError) ErrorName() string {
	return "RemoveOrgRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrgRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgRoleResponseValidationError{}

// Validate checks the field values on UpdateOrgRolePermissionRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgRolePermissionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgRolePermissionRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOrgRolePermissionRequestMultiError, or nil if none found.
func (m *UpdateOrgRolePermissionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgRolePermissionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Authorization

	// no validation rules for OrgId

	// no validation rules for RoleId

	for idx, item := range m.GetPermissions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, UpdateOrgRolePermissionRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, UpdateOrgRolePermissionRequestValidationError{
						field:  fmt.Sprintf("Permissions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return UpdateOrgRolePermissionRequestValidationError{
					field:  fmt.Sprintf("Permissions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return UpdateOrgRolePermissionRequestMultiError(errors)
	}

	return nil
}

// UpdateOrgRolePermissionRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateOrgRolePermissionRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateOrgRolePermissionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgRolePermissionRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgRolePermissionRequestMultiError) AllErrors() []error { return m }

// UpdateOrgRolePermissionRequestValidationError is the validation error
// returned by UpdateOrgRolePermissionRequest.Validate if the designated
// constraints aren't met.
type UpdateOrgRolePermissionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgRolePermissionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgRolePermissionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgRolePermissionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgRolePermissionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgRolePermissionRequestValidationError) ErrorName() string {
	return "UpdateOrgRolePermissionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgRolePermissionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgRolePermissionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgRolePermissionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgRolePermissionRequestValidationError{}

// Validate checks the field values on UpdateOrgRolePermissionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrgRolePermissionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrgRolePermissionResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateOrgRolePermissionResponseMultiError, or nil if none found.
func (m *UpdateOrgRolePermissionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrgRolePermissionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrgRolePermissionResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrgRolePermissionResponseValidationError{
					field:  "Role",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgRolePermissionResponseValidationError{
				field:  "Role",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrgRolePermissionResponseMultiError(errors)
	}

	return nil
}

// UpdateOrgRolePermissionResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrgRolePermissionResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateOrgRolePermissionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrgRolePermissionResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrgRolePermissionResponseMultiError) AllErrors() []error { return m }

// UpdateOrgRolePermissionResponseValidationError is the validation error
// returned by UpdateOrgRolePermissionResponse.Validate if the designated
// constraints aren't met.
type UpdateOrgRolePermissionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgRolePermissionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgRolePermissionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgRolePermissionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgRolePermissionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgRolePermissionResponseValidationError) ErrorName() string {
	return "UpdateOrgRolePermissionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgRolePermissionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgRolePermissionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgRolePermissionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgRolePermissionResponseValidationError{}
